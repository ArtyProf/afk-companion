name: Build, Release & Deploy

on:
  push:
    branches: [ main ]
    paths: [ 'package.json' ]  # Trigger only when package.json changes
  workflow_dispatch:  # Allows manual trigger
    inputs:
      force_version:
        description: 'Override package.json version (optional)'
        required: false
        default: ''

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-changed: ${{ steps.version.outputs.changed }}
      should-deploy: ${{ steps.version.outputs.should-deploy }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Get current and previous commit

    - name: Check version change
      id: version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Check if this is a manual trigger with force version
        if [ -n "${{ inputs.force_version }}" ]; then
          VERSION="${{ inputs.force_version }}"
          echo "🔧 Using manual override version: $VERSION"
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # For push events, check if version changed
        if [ "${{ github.event_name }}" = "push" ]; then
          # Get previous version from previous commit
          git checkout HEAD~1 -- package.json 2>/dev/null || echo "No previous version found"
          PREVIOUS_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          git checkout HEAD -- package.json
          
          echo "Previous version: $PREVIOUS_VERSION"
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "✅ Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Version unchanged: $CURRENT_VERSION"
            echo "version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi
        else
          # For other events, always deploy
          echo "version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        fi

  create-tag:
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should-deploy == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create and push tag
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        echo "Creating tag: $VERSION"
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create and push tag
        git tag -a "$VERSION" -m "Release $VERSION"
        git push origin "$VERSION"
        echo "✅ Tag $VERSION created and pushed"

  build-windows:
    needs: [check-version, create-tag]
    runs-on: windows-latest
    if: needs.check-version.outputs.should-deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Windows version
      run: |
        echo "Building Windows executable..."
        set CSC_IDENTITY_AUTO_DISCOVERY=false
        npm run build:ts
        npm run build:webpack
        npm run build:win
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false

    - name: Verify build
      shell: bash
      run: |
        if [ -f "dist/afk-companion.exe" ]; then
          echo "Build successful: Windows executable created"
          ls -la "dist/afk-companion.exe"
        else
          echo "Build failed: executable not found"
          exit 1
        fi

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: dist/
        retention-days: 1

  build-linux:
    needs: [check-version, create-tag]
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should-deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Linux version
      run: |
        echo "Building Linux executable..."
        npm run build:ts
        npm run build:webpack
        npm run build:linux

    - name: Verify build
      run: |
        if [ -f dist/linux-unpacked/afk-companion ]; then
          echo "Build successful: Linux executable created"
          ls -la dist/linux-unpacked/
        fi
        if [ -f dist/*.tar.gz ]; then
          echo "Build successful: Linux tar.gz created"
          ls -la dist/*.tar.gz
        fi
        # Check if at least one Linux build artifact exists
        if [ ! -f dist/linux-unpacked/afk-companion ] && [ ! -f dist/*.tar.gz ]; then
          echo "Build failed: No Linux artifacts found"
          exit 1
        fi

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: dist/
        retention-days: 1

  build-macos:
    needs: [check-version, create-tag]
    runs-on: macos-latest
    if: needs.check-version.outputs.should-deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build macOS universal version
      run: |
        echo "Building macOS universal executable..."
        npm run build:ts
        npm run build:webpack
        npm run build:mac
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false

    - name: Verify build
      run: |
        if [ -d "dist/mac-universal/afk-companion.app" ]; then
          echo "Build successful: macOS universal app created"
          ls -la "dist/mac-universal/"
          echo "App bundle contents:"
          ls -la "dist/mac-universal/afk-companion.app/Contents/MacOS/"
        fi
        if [ -f dist/*.dmg ]; then
          echo "Build successful: macOS DMG created"
          ls -la dist/*.dmg
        fi
        # Check if at least one macOS build artifact exists
        if [ ! -d "dist/mac-universal/afk-companion.app" ] && [ ! -f dist/*.dmg ]; then
          echo "Build failed: No macOS artifacts found"
          exit 1
        fi

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: dist/
        retention-days: 1

  deploy:
    needs: [check-version, build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Set version
      id: version
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "✅ Using version: $VERSION"

    - name: Download Windows build
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: dist-windows/

    - name: Download Linux build
      uses: actions/download-artifact@v4
      with:
        name: linux-build
        path: dist-linux/

    - name: Download macOS build
      uses: actions/download-artifact@v4
      with:
        name: macos-build
        path: dist-macos/

    - name: Verify downloaded builds
      run: |
        echo "Verifying builds..."
        echo "Windows build:"
        ls -la dist-windows/
        echo "Linux build:"
        ls -la dist-linux/
        echo "macOS build:"
        ls -la dist-macos/
        
        if [ ! -f dist-windows/afk-companion.exe ]; then
          echo "Windows executable not found!"
          exit 1
        fi
        
        if [ ! -f dist-linux/linux-unpacked/afk-companion ] && [ ! -f dist-linux/*.tar.gz ]; then
          echo "Linux executable/packages not found!"
          exit 1
        fi
        
        if [ ! -d "dist-macos/mac-universal/afk-companion.app" ] && [ ! -f dist-macos/*.dmg ]; then
          echo "macOS app/package not found!"
          exit 1
        fi
        
        echo "All builds verified"

    - name: Create Steam build directory
      run: |
        mkdir -p steam-build/windows
        mkdir -p steam-build/linux
        mkdir -p steam-build/macos
        
        # Copy Windows executable to Steam build
        cp dist-windows/afk-companion.exe steam-build/windows/
        
        # Copy Linux executable to Steam build (unpacked only, no tar.gz)
        if [ -f dist-linux/linux-unpacked/afk-companion ]; then
          cp -r dist-linux/linux-unpacked/* steam-build/linux/
        fi
        
        # Copy macOS app bundle to Steam build
        if [ -d "dist-macos/mac-universal/afk-companion.app" ]; then
          cp -r "dist-macos/mac-universal/afk-companion.app" steam-build/macos/
        fi
        
        echo "Steam build directory created"
        ls -la steam-build/windows/
        ls -la steam-build/linux/
        ls -la steam-build/macos/

    - name: Deploy to Steam
      uses: game-ci/steam-deploy@v3
      with:
        username: ${{ secrets.STEAM_USERNAME }}
        configVdf: ${{ secrets.STEAM_CONFIG_VDF }}
        appId: 2609100
        buildDescription: AFK Companion ${{ steps.version.outputs.version }} - Universal Build (Windows/Linux/macOS)
        rootPath: steam-build
        depot1Path: windows
        depot2Path: linux
        depot3Path: macos

    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: steam-build-logs
        path: steam-logs/
        retention-days: 30

    - name: Prepare release assets
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        echo "Preparing release assets for $VERSION"
        
        # Create release directory
        mkdir -p release-assets
        
        # Copy Windows executable
        if [ -f "dist-windows/afk-companion.exe" ]; then
          cp "dist-windows/afk-companion.exe" "release-assets/afk-companion-${VERSION}-windows.exe"
          echo "✅ Windows executable prepared"
        fi
        
        # Copy Linux tar.gz
        if [ -f dist-linux/*.tar.gz ]; then
          cp dist-linux/*.tar.gz "release-assets/"
          echo "✅ Linux tar.gz prepared"
        fi
        
        # Copy macOS DMG
        if [ -f dist-macos/*.dmg ]; then
          cp dist-macos/*.dmg "release-assets/"
          echo "✅ macOS DMG prepared"
        fi
        
        ls -la release-assets/

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        
        # Fetch all tags and history
        git fetch --tags --unshallow 2>/dev/null || git fetch --tags 2>/dev/null || true
        
        # Get the previous tag (excluding current if it exists)
        LAST_TAG=$(git tag -l --sort=-version:refname | grep -v "^${VERSION}$" | head -1)
        
        if [ -z "$LAST_TAG" ]; then
          echo "📝 No previous tag found, generating release notes from all history..."
          echo "## 📝 What's Changed" > release_notes.md
          echo "" >> release_notes.md
          # All commits for first release
          git log --pretty=format:"- %s (%h)" >> release_notes.md
        else
          echo "📝 Generating release notes from ${LAST_TAG} to current HEAD"
          echo "Previous tag: $LAST_TAG"
          echo "Current HEAD: $(git rev-parse HEAD)"
          
          echo "## 📝 What's Changed" > release_notes.md
          echo "" >> release_notes.md
          # All commits between the previous tag and current HEAD
          git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "" >> release_notes.md
        
        # Add download section
        cat >> release_notes.md << 'EOF'
        ## 📥 Downloads
        - **🪟 Windows**: `afk-companion-${{ needs.check-version.outputs.version }}-windows.exe` - Portable executable
        - **📦 Linux Archive**: `afk-companion-${{ needs.check-version.outputs.version }}.tar.gz` - Compressed package
        - **🍎 macOS**: `afk-companion-${{ needs.check-version.outputs.version }}-universal.dmg` - Universal installer (Intel & Apple Silicon)
        
        ## 🚀 Steam Deployment
        - **🆔 App ID**: 2609100
        - **🪟 Windows Depot**: 2609101
        - **🐧 Linux Depot**: 2609102
        - **🍎 macOS Depot**: 2609103 (Universal Binary)
        
        ## ✨ Features
        - 🎯 Anti-idle utility for gaming and work
        - 🖱️ Cross-platform mouse and keyboard simulation
        - 🛡️ System tray operation
        - ⏱️ Customizable intervals and actions
        - 🏠 Local operation with no network requirements
        - 🔧 Safe, non-intrusive actions
        - 🌍 **Universal macOS support** (Intel & Apple Silicon)
        - ☁️ **Steam Cloud integration** for cross-device sync
        
        ## 📋 How to Use
        1. Download the appropriate version for your OS
        2. Run the executable (no installation required)
        3. Configure your preferred settings
        4. Click "Start" to prevent AFK/idle status
        
        ## 💻 System Requirements
        - **Windows**: Windows 10+ (x64)
        - **Linux**: Any modern distribution (x64)
        - **macOS**: macOS 10.13+ (Universal: Intel & Apple Silicon)
        
        ---
        **Made with Electron** ⚛️ | **Auto-deployed via GitHub Actions** 🤖
        
        EOF
        
        echo "" >> release_notes.md
        
        # Add changelog link
        if [ -n "$LAST_TAG" ]; then
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${VERSION}" >> release_notes.md
        else
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/commits/${VERSION}" >> release_notes.md
        fi
        
        echo "✅ Release notes created"
        cat release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.check-version.outputs.version }}
        name: 🎮 AFK Companion ${{ needs.check-version.outputs.version }}
        body_path: release_notes.md
        files: release-assets/*
        draft: false
        prerelease: false

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "🎉 Deployment successful!"
          echo "📦 Version: ${{ needs.check-version.outputs.version }}"
          echo "🏷️ GitHub Release: Created with executables attached"
          echo "🚀 Steam App ID 2609100 updated:"
          echo "  🪟 Windows depot 2609101: afk-companion.exe"
          echo "  🐧 Linux depot 2609102: Linux packages"
          echo "  🍎 macOS depot 2609103: Universal app bundle (Intel & Apple Silicon)"
          echo ""
          echo "✅ Universal cross-platform build deployed and released"
        else
          echo "❌ Deployment failed!"
          echo "📦 Version: ${{ needs.check-version.outputs.version }}"
          echo "🔍 Check the build logs for details."
        fi

  skip-deployment:
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should-deploy == 'false'
    steps:
    - name: Skip deployment notification
      run: |
        echo "⏭️ Skipping deployment - version unchanged"
        echo "📦 Current version: ${{ needs.check-version.outputs.version }}"
        echo "💡 To trigger deployment:"
        echo "  1. Update version in package.json"
        echo "  2. Or manually trigger with force_version input"